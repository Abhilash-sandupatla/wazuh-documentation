.. _poc_detect_yara:

Detecting malware - Yara
========================

Yara is a tool aimed at (but not limited to) helping malware researchers to identify and classify malware artifacts. By integrating it with Wazuh we can scan files that have been added/modified and check if they contain malware.

Configuration on the Wazuh manager
----------------------------------

Create local rules and decoders that will trigger on added/modified files in the ``/tmp`` directory, and also the rules that will check the results.

- Rules at ``/var/ossec/etc/rules/local_rules.xml``:

    .. code-block:: XML

        <group name="syscheck,">
            <rule id="100300" level="7">
                <if_sid>550</if_sid>
                <field name="file">/tmp</field>
                <description>File modified in /tmp directory.</description>
            </rule>
            <rule id="100301" level="7">
                <if_sid>554</if_sid>
                <field name="file">/tmp</field>
                <description>File added to /tmpdirectory.</description>
            </rule>
        </group>

        <group name="yara,">
            <rule id="108000" level="0">
                <decoded_as>yara_decoder</decoded_as>
                <description>Yara grouping rule</description>
            </rule>
            <rule id="108001" level="12">
                <if_sid>108000</if_sid>
                <match>wazuh-yara: INFO - Scan result: </match>
                <description>File "$(yara_scanned_file)" is a positive match. Yara rule: $(yara_rule)</description>
            </rule>
        </group>


- Decoders at ``/var/ossec/etc/decoders/local_decoders.xml``:

    .. code-block:: XML

        <decoder name="yara_decoder">
            <prematch>wazuh-yara:</prematch>
        </decoder>

        <decoder name="yara_decoder1">
            <parent>yara_decoder</parent>
            <regex>wazuh-yara: (\S+) - Scan result: (\S+) (\S+)</regex>
            <order>log_type, yara_rule, yara_scanned_file</order>
        </decoder>

- Add this configuration to the Wazuh manager at ``/var/ossec/etc/ossec.conf``:

    .. code-block:: XML

        <ossec_config>
            <command>
                <name>yara</name>
                <executable>yara.sh</executable>
                <extra_args>-yara_path /usr/local/bin -yara_rules /home/wazuh/yara/rules/yara_rules.yar</extra_args>
                <timeout_allowed>no</timeout_allowed>
            </command>
            <active-response>
                <command>yara</command>
                <location>local</location>
                <rules_id>100300,100301</rules_id>
            </active-response>
        </ossec_config>

- Restart Wazuh manager to apply configuration changes

    .. code-block:: console

        systemctl restart wazuh-manager

Configuration on the monitored Linux system
-------------------------------------------

- Compile and install Yara

    .. code-block:: console

        yum -y install make gcc autoconf libtool openssl-devel && \
        curl -LO https://github.com/VirusTotal/yara/archive/v4.0.2.tar.gz && \
        tar -xvzf v4.0.2.tar.gz && \
        cd yara-4.0.2 &&
        ./bootstrap.sh && ./configure && make && sudo make install && make check

- Download Yara rules

    .. code-block:: console

        cd /tmp/
        curl 'https://valhalla.nextron-systems.com/api/v1/get' \
        -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \
        -H 'Accept-Language: en-US,en;q=0.5' \
        --compressed \
        -H 'Referer: https://valhalla.nextron-systems.com/' \
        -H 'Content-Type: application/x-www-form-urlencoded' \
        -H 'DNT: 1' -H 'Connection: keep-alive' -H 'Upgrade-Insecure-Requests: 1' \
        --data 'demo=demo&apikey=1111111111111111111111111111111111111111111111111111111111111111&format=text' \
        -o yara_rules.yar

- Download a malware sample (this is a real malware artifact) and run a Yara scan

    .. code-block:: XML

        curl -LO https://wazuh-demo.s3-us-west-1.amazonaws.com/mirai -o /tmp/mirai
        /usr/local/bin/yara /tmp/yara_rules.yar /tmp/mirai

- Create a ``yara.sh`` script in ``/var/ossec/active-response/bin/``. Ensure owner and group must be ``root:ossec`` and permissions ``0750``:


    .. code-block:: console

            #!/bin/bash
            # Wazuh - Yara active response
            # Copyright (C) 2015-2021, Wazuh Inc.
            #
            # This program is free software; you can redistribute it
            # and/or modify it under the terms of the GNU General Public
            # License (version 2) as published by the FSF - Free Software
            # Foundation.


            #------------------------- Gather parameters -------------------------#

            # Extra arguments
            read INPUT_JSON
            YARA_PATH=$(echo $INPUT_JSON | jq -r .parameters.extra_args[1])
            YARA_RULES=$(echo $INPUT_JSON | jq -r .parameters.extra_args[3])
            FILENAME=$(echo $INPUT_JSON | jq -r .parameters.alert.syscheck.path)

            # Set LOG_FILE path
            LOG_FILE="logs/active-responses.log"


            #----------------------- Analyze parameters -----------------------#

            if [[ ! $YARA_PATH ]] || [[ ! $YARA_RULES ]]
            then
                echo "wazuh-yara: ERROR - Yara active response error. Yara path and rules parameters are mandatory." >> ${LOG_FILE}
                exit 1
            fi

            #------------------------- Main workflow --------------------------#

            # Execute Yara scan on the specified filename
            yara_output="$("${YARA_PATH}"/yara -w -r "$YARA_RULES" "$FILENAME")"

            if [[ $yara_output != "" ]]
            then
                # Iterate every detected rule and append it to the LOG_FILE
                while read -r line; do
                    echo "wazuh-yara: INFO - Scan result: $line" >> ${LOG_FILE}
                done <<< "$yara_output"
            fi

            exit 0;


- Ensure ``jq`` is installed to process the JSON input in the ``yara.sh`` script

- Change ``/var/ossec/active-response/bin/yara.sh`` file owner and permissions:

    .. code-block:: XML

        chmod 750 /var/ossec/active-response/bin/yara.sh
        chown root:ossec /var/ossec/active-response/bin/yara.sh

- Change the file integrity monitoring settings to monitor ``/tmp`` in real-time. This change can be done in ``/var/ossec/etc/ossec.conf``

    .. code-block:: XML

        <syscheck>
            <directories whodata="yes">/tmp</directories>
        </syscheck>


- Restart Wazuh manager to apply configuration changes

    .. code-block:: console

        Restart Wazuh manager to apply configuration changes

Steps to generate the alerts
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- Create the script ``/tmp/malware_downloader.sh`` to automatically download malware samples:

#!/bin/bash
# Wazuh - Malware Downloader for test purposes
# Copyright (C) 2015-2021, Wazuh Inc.
#
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License (version 2) as published by the FSF - Free Software
# Foundation.

function fetch_sample(){

  curl -s -XGET "$1" -o "$2"

}

echo "WARNING: Downloading Malware samples, please use this script with  caution."
read -p "  Do you want to continue? (y/n)" -n 1 -r ANSWER
echo

    .. code-block:: console

        if [[ $ANSWER =~ ^[Yy]$ ]]
        then
            echo
            # Mirai
            echo "# Mirai: https://en.wikipedia.org/wiki/Mirai_(malware)"
            echo "Downloading malware sample..."
            fetch_sample "https://wazuh-demo.s3-us-west-1.amazonaws.com/mirai" "/tmp/mirai" && echo "Done!" || echo "Error while downloading."
            echo

            # Xbash
            echo "# Xbash: https://unit42.paloaltonetworks.com/unit42-xbash-combines-botnet-ransomware-coinmining-worm-targets-linux-windows/"
            echo "Downloading malware sample..."
            fetch_sample "https://wazuh-demo.s3-us-west-1.amazonaws.com/xbash" "/tmp/xbash" && echo "Done!" || echo "Error while downloading."
            echo

            # VPNFilter
            echo "# VPNFilter: https://news.sophos.com/en-us/2018/05/24/vpnfilter-botnet-a-sophoslabs-analysis/"
            echo "Downloading malware sample..."
            fetch_sample "https://wazuh-demo.s3-us-west-1.amazonaws.com/vpn_filter" "/tmp/vpn_filter" && echo "Done!" || echo "Error while downloading."
            echo

            # Webshell
            echo "# WebShell: https://github.com/SecWiki/WebShell-2/blob/master/Php/Worse%20Linux%20Shell.php"
            echo "Downloading malware sample..."
            fetch_sample "https://wazuh-demo.s3-us-west-1.amazonaws.com/webshell" "/tmp/webshell" && echo "Done!" || echo "Error while downloading."
            echo
        fi

- Download a malware sample to ``/tmp`` directory by running the script:

    .. code-block:: XML

        bash /tmp/malware_downloader.sh

On the agent, the results of the Yara scan can be seen at ``/var/ossec/logs/active-responses.log``

    .. code-block:: output

        tail -f /var/ossec/logs/active-responses.log
        wazuh-yara: INFO - Scan result: SUSP_XORed_Mozilla_RID2DB4 /tmp/mirai
        wazuh-yara: INFO - Scan result: MAL_ELF_LNX_Mirai_Oct10_2_RID2F3A /tmp/mirai
        wazuh-yara: INFO - Scan result: Mirai_Botnet_Malware_RID2EF6 /tmp/mirai
        wazuh-yara: INFO - Scan result: MAL_ELF_VPNFilter_3_RID2D6C /tmp/vpn_filter
        wazuh-yara: INFO - Scan result: Webshell_Worse_Linux_Shell_php_RID3323 /tmp/webshell
        wazuh-yara: INFO - Scan result: Webshell_Worse_Linux_Shell_1_RID320C /tmp/webshell


Alerts
^^^^^^

- ``rule.groups:yara``

Affected endpoints
^^^^^^^^^^^^^^^^^^

- Linux RHEL