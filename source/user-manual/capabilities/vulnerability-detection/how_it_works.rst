.. Copyright (C) 2021 Wazuh, Inc.

.. vu_how_it_works:

How it works
============

To be able to detect vulnerabilities, now agents are able to natively collect a list of installed applications, sending it periodically to the manager (where it is stored in local sqlite databases, one per agent). Also, the manager builds a global vulnerability database, from publicly available CVE repositories, using it later to cross-correlate this information with the agent's applications inventory data.

The global vulnerability database is created automatically, currently pulling data from the following repositories:

- `<https://canonical.com>`_: Used to pull CVEs for Ubuntu Linux distributions.
- `<https://www.redhat.com>`_: Used to pull CVEs for Red Hat and CentOS Linux distributions.
- `<https://www.debian.org>`_: Used to pull CVEs for Debian Linux distributions.
- `<https://nvd.nist.gov/>`_: Used to pull CVEs from the National Vulnerability Database.
- `<https://feed.wazuh.com/>`_: Used to pull the MSU feed with CVEs and patches for Microsoft products.

This database can be configured to be updated periodically, ensuring that the solution will check for the very latest CVEs.

Once the global vulnerability database (with the CVEs) is created, the detection process looks for vulnerable packages in the inventory databases (unique per agent). Alerts are generated when a CVE (Common Vulnerabilities and Exposures) affects a package that is known to be installed in one of the monitored servers. A package is labeled as vulnerable when its version is contained within the affected range of a CVE.

Scan types
==========

The results are presented as alerts and also stored in a database. You can check the last scan alerts, or query each agent's individual CVEs DB.

The Vulnerability Detector module can run a scan on startup (**run_on_start** option) and with a fixed frequency (**interval**).
In any of these cases, the packages that have been already scanned will wait until the **ignore_time** expires to be re-scanned.
This results in a better performance and we avoid a repeated alert during a configurable time. We have then two different type of scans

- Partial scans: only new packages are scanned, as long as **ignore_time** is still valid
- Full scan: the first scan of an agent always is complete. But then, only when the **ignore_time** passes the module scans all available packages again

There are few considerations that arise from this behavior

- Every full scan generates alerts for all packages, so the alerts are repeated until they get fixed
- The user can't trigger a full scan manually, the only option is to decrease the **ignore_time** option
- The partial scans generate alerts for new packages, but they don't delete alerts for removed packages.
- Partial scans can be triggered with a Manager restart

Check :doc:`Vulnerability detector settings<../../reference/ossec-conf/vuln-detector>` for more configuration details.

The following example may be useful to understand all steps involved

.. thumbnail:: ../../../images/manual/vuln-detector/CVE-uml.png
    :title: Vulnerability detector workflow
    :align: center
    :width: 100%
