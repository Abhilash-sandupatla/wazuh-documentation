.. Copyright (C) 2015, Wazuh, Inc.

.. meta::
   :description: Vulnerability Detection is one of the Wazuh capabilities. Learn more about how it works and the repositories it uses.

How it works
============

To detect vulnerabilities, Wazuh agents collect a list of installed applications from monitored endpoints and send it periodically to the Wazuh server. Local SQLite databases in the Wazuh server store this list. Also, the Wazuh server builds a global vulnerability database from publicly available CVE repositories. It uses this database to cross-correlate this information with the application inventory data of the agent. The database location is ``/var/ossec/queue/vulnerabilities/cve.db`` and can be queried using ``SQLite``:

.. code-block:: console

   # sqlite3 /var/ossec/queue/vulnerabilities/cve.db

.. code-block:: sqlite3

   sqlite> .tables

.. code-block:: sqlite3

   sqlite> select * from <table>;

The Wazuh server creates the global vulnerability database automatically with data from the following repositories:

-  https://canonical.com: Used to pull CVEs for Ubuntu Linux distributions.
-  https://www.redhat.com: Used to pull CVEs for Red Hat and CentOS Linux distributions.
-  https://www.debian.org: Used to pull CVEs for Debian Linux distributions.
-  https://security.archlinux.org: Used to pull CVEs for Arch Linux distributions.
-  https://nvd.nist.gov: Used to pull CVEs from the National Vulnerability Database.
-  https://feed.wazuh.com: Used to pull Microsoft Security Updates (MSU) and ALAS feeds. The feeds contain CVE and patch information for Microsoft products and Amazon Linux. The feed uses the `Microsoft Update Catalog <https://www.catalog.update.microsoft.com/>`__ and the `Amazon Linux Security Center <https://alas.aws.amazon.com/>`__. Wazuh parses and formats the information before being uploaded to the Wazuh feed.

Wazuh updates this database, ensuring the solution checks for the latest CVEs.
Once the Vulnerability Detector module has created the global vulnerability database containing the CVEs, the detection process looks for vulnerable packages in the inventory databases. These inventories are unique to each agent. A package is labeled as vulnerable when its version matches those within the affected range of a CVE. Alerts show the results, and the module stores the findings in a per-agent vulnerability inventory. This inventory contains the current state of every agent and includes vulnerabilities that have been detected and not resolved. Users can :doc:`query the inventory </user-manual/capabilities/syscollector>` to check for alerts and vulnerability information.

For Microsoft Windows systems and specific Microsoft products, the Vulnerability Detector has the ``hotfixes`` option. Using this option enables the module to detect packages that the user has patched. When the Vulnerability Detector detects a patch, it uses the information provided by Microsoft to decide if the patch has resolved the CVEs. Then, it removes them from the list of vulnerabilities.

Alert generation
----------------

The diagram below shows the vulnerability detector workflow:

.. thumbnail:: /images/manual/vuln-detector/vuln-detector-workflow.png
    :title: Vulnerability detector workflow
    :align: center
    :width: 80%

.. _vuln_det_compatibility_matrix:

Compatibility matrix
--------------------

The following table shows the operating systems the Vulnerability Detector currently supports and the provider(s) needed for each distribution.

+---------------+------------------------+-----------------------------------+
| Distribution  | Versions               | Provider                          |
+===============+========================+===================================+
|               | 5                      |                                   |
|               +------------------------+                                   |
|               | 6                      |                                   |
|               +------------------------+                                   |
|  Red Hat &    | 7                      | - Red Hat                         |
|  CentOS       +------------------------+ - National Vulnerability Database |
|               | 8                      |                                   |
+---------------+------------------------+-----------------------------------+
|  Red Hat      | 9                      | - Red Hat                         |
|               |                        | - National Vulnerability Database |
+---------------+------------------------+-----------------------------------+
|               | trusty / 14            |                                   |
|               +------------------------+                                   |
| Ubuntu        | xenial / 16            |                                   |
|               +------------------------+ - Canonical                       |
|               | bionic / 18            | - National Vulnerability Database |
|               +------------------------+                                   |
|               | focal / 20             |                                   |
|               +------------------------+                                   |
|               | jammy / 22             |                                   |
+---------------+------------------------+-----------------------------------+
|               | stretch / 9            |                                   |
|               +------------------------+ - Debian                          |
| Debian        | buster / 10            | - National Vulnerability Database |
|               +------------------------+                                   |
|               | bullseye / 11          |                                   |
+---------------+------------------------+-----------------------------------+
|               | Amazon Linux 1         | - ALAS                            |
| Amazon Linux  +------------------------+ - National Vulnerability Database |
|               | Amazon Linux 2         |                                   |
+---------------+------------------------+-----------------------------------+
|               |                        |                                   |
| Arch Linux    | Rolling release        | - Arch                            |
|               |                        | - National Vulnerability Database |
+---------------+------------------------+-----------------------------------+
|               |                        |                                   |
| Windows       | Windows XP and later   | - National Vulnerability Database |
|               |                        | - MSU                             |
+---------------+------------------------+-----------------------------------+
|               |                        |                                   |
| macOS         | macOS Sierra and later | - National Vulnerability Database |
|               |                        |                                   |
+---------------+------------------------+-----------------------------------+

.. note::
   
   Users can extend support for operating systems that aren't listed above by using the :doc:`allow <allow-os>` option.

////////////////////////////////

Once the global vulnerability database (with the CVEs) is created, the detection process looks for vulnerable packages in the inventory databases (unique per agent). Alerts are generated when a CVE (Common Vulnerabilities and Exposures) affects a package that is known to be installed on one of the monitored hosts. A package is labeled as *vulnerable* when its version is contained within the affected range of a CVE.
The results are presented as alerts and also stored in a per-agent vulnerabilities inventory. In this way, you can check the last scan alerts or query every single agent's vulnerabilities inventory.

.. _vuln_det_scan_types:

Scan types
^^^^^^^^^^

The Vulnerability Detector module runs scans on startup when :ref:`run_on_start <vuln_det_run_on_start>` is enabled or every certain period of time (defined by :ref:`interval <vuln_det_interval>`).
In any of these cases, the packages and the operating system already scanned will not be re-scanned. Only new installed packages will be considered for scanning, and alerts will be generated if they have vulnerabilities.
There is only one case in which the packages and the operating system will be re-scanned: when the database of vulnerabilities receives new CVEs information and :ref:`min_full_scan_interval <vuln_det_min_full_scan_interval>` expires.

We have then three different types of scans:

- `Baseline`: This scan type will be triggered the first time after `Vulnerability Detector` is enabled. It performs a full scan for every single package installed as well as the operating system. As a result, the CVE inventory will have the information of the vulnerabilities detected and an alert will be generated for each vulnerability.
- `Full scan`: In this scan type, every single package installed as well as the operating system are scanned. It runs only when the configured :ref:`min_full_scan_interval <vuln_det_min_full_scan_interval>` expires and the CVEs database is updated with new information. As a result, any update/change in the vulnerability inventory will be alerted.
- `Partial scan`: Only new packages are scanned. As a result, any update/change in the vulnerability inventory will be alerted.

There are a few considerations that arise from this behavior:

- The :ref:`min_full_scan_interval <vuln_det_min_full_scan_interval>` setting protects the manager performance from running too often `Full scans` in case of receiving many updates of vulnerabilities feeds.
- Every vulnerability in the agents' vulnerabilities inventory for both packages and operating systems may be found in three different states:
    - `VALID`: Indicates that the vulnerability is still present in the system.
    - `PENDING`: A `Full scan` is in progress, and the vulnerability needs to be confirmed.
    - `OBSOLETE`: Indicates that the vulnerability is no longer present in the system. This state is then used to generate the removal alerts.

Alerts generation
^^^^^^^^^^^^^^^^^

- Detection alerts are generated when a new vulnerability is added to the vulnerabilities inventory.
- Removal alerts are generated when a vulnerability has been removed from the vulnerabilities inventory.

Check :doc:`Vulnerability detector settings<../../reference/ossec-conf/vuln-detector>` for more configuration details.

The following example diagram is useful to understand the steps involved in a typical `vulnerability detector` workflow.

.. thumbnail:: /images/manual/vuln-detector/vuln-detector-workflow.png
    :title: Vulnerability detector workflow
    :align: center
    :width: 80%
