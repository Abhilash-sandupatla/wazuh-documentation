.. Copyright (C) 2021 Wazuh, Inc.

.. _wazuh_with_yara:

How to integrate Wazuh with YARA
================================

Wazuh can integrate with YARA in different ways. YARA is a versatile Open Source pattern-matching tool aimed to detect malware samples based on rule descriptions, although it is not limited to that use case alone.

This use case focuses on automatically executing YARA scans by using the ``active response`` module when a Wazuh FIM alert is triggered. This is an interesting way of using YARA as it concentrates the scans on new files or files that change in your environment, thus optimizing resource consumption on the monitored endpoints.

The next diagram illustrates the flow of events between the different components:

.. thumbnail:: ../../../../images/manual/automatic-remediation/YARA-Wazuh-integration-components-flow-diagram.png
  :title: Wazuh with YARA integration flow diagram
  :align: center
  :width: 100%

Wazuh active response
----------------------

An active response can execute a script when a specific alert, alert level, or rule group is triggered in your Wazuh system. There are two types:

- ``Stateful``. It can undo the action after a specified period of time.

- ``Stateless``. It represents a single execution without an event to revert the original effect.

You can also decide where the action will take place:

- ``Local``. It runs the script on the agent that generated the alert.

- ``Server``. It runs the script on the Wazuh manager.

- ``Defined agent``. It specifies the IDs of the agents that run the script regardless of where the event has been observed.

- ``All``. Every agent in the environment will run the script. Use with caution.

In this use case, you will define a stateless type of active response that will be executed locally on the agent that generated the alert.

Wazuh manager configuration
---------------------------

First, you need to tell the manager what is the action that you want to execute and under which circumstances you want it to be triggered. For that, edit the configuration file located at ``/var/ossec/etc/ossec.conf`` and add the following:

.. code-block:: none

  <ossec_config>
    <command>
      <name>yara</name>
      <executable>yara.sh</executable>
      <extra_args>-yara_path /path/to/yara -yara_rules /path/to/rules</extra_args>
      <timeout_allowed>no</timeout_allowed>
    </command>
    <active-response>
      <command>yara</command>
      <location>local</location>
      <rules_id>550,554</rules_id>
    </active-response>
  </ossec_config>

Command
^^^^^^^

It contains information about the action to be executed on the agent, including its parameters:

- The ``name`` setting uniquely identifies the command, ``yara``.

- The script in the ``executable`` setting, ``yara.sh``.

- The ``extra_args`` setting needed to specify where the YARA binary and rules are located.

- The ``timeout_allowed`` setting set to no. This represents a stateless active response.

Active response
^^^^^^^^^^^^^^^

It defines the criteria used to execute a specific command:

- The ``command`` to execute. It references the ``yara`` command created above.

- The ``location`` setting as ``local``. It means that the active response is executed on the agent that generates the alert.

- You can write a list of rule IDs that will trigger the active response in the ``rules_id`` setting. This example uses rule ``550``, new file added to the system, and rule ``554``, file modified in the system.

Rules and decoders
^^^^^^^^^^^^^^^^^^

Now you need to define a set of rules and decoders to trigger alerts from the events generated by the YARA active response.

Create a decoder file, for example ``/var/ossec/etc/decoders/yara_decoders.xml``, and add the following:

.. code-block:: none

  <!--
   - YARA decoders
   - Created by Wazuh, Inc.
   - Copyright (C) 2015-2021, Wazuh Inc.
   - This program is a free software; you can redistribute it and/or modify it under the terms of GPLv2.
  -->
 
  <decoder name="yara">
    <prematch>wazuh-yara: </prematch>
  </decoder>

  <decoder name="yara">
    <parent>yara</parent>
    <regex>wazuh-yara: (\S+) - Scan result: (\S+) (\S+)</regex>
    <order>log_type, yara_rule, yara_scanned_file</order>
  </decoder>

  <decoder name="yara">
    <parent>yara</parent>
    <regex>wazuh-yara: (\S+) - Yara active response error. (\.+)</regex>
    <order>log_type, error_message</order>
  </decoder>


Similarly create a rule file, ``/var/ossec/etc/rules/yara_rules.xml``, with the following content:

.. code-block:: none

  <!-- 
   - YARA rules 
   - Created by Wazuh, Inc. 
   - Copyright (C) 2015-2021, Wazuh Inc. 
   - This program is a free software; you can redistribute it and/or modify it under the terms of GPLv2. 
  -->

   <group name="yara,">
      <rule id="100100" level="0">
          <decoded_as>yara</decoded_as>
          <description>YARA rules grouped.</description>
      </rule>

      <rule id="100101" level="5">
          <if_sid>100100</if_sid>
          <field name="error_message">\.+</field>
          <description>YARA error detected.</description>
      </rule>

      <rule id="100102" level="10">
          <if_sid>100100</if_sid>
          <field name="yara_rule">\.+</field>
          <description>YARA $(yara_rule) detected.</description>
      </rule>
  </group>

Wazuh agent configuration
-------------------------

The following section assumes YARA is already installed on the monitored endpoint.  If you need to install it, you can do it following the `official YARA installation guide <https://yara.readthedocs.io/en/stable/gettingstarted.html#compiling-and-installing-yara>`_. 

The script configured to run as part of the active response settings defined on the Wazuh manager, ``yara.sh``, needs to be placed under ``/var/ossec/active-response/bin`` on the Wazuh agent side. Add the following content to it:
  
.. code-block:: none
  
  #!/bin/bash
  # Wazuh - Yara active response
  # Copyright (C) 2015-2021, Wazuh Inc.
  #
  # This program is free software; you can redistribute it
  # and/or modify it under the terms of the GNU General Public
  # License (version 2) as published by the FSF - Free Software
  # Foundation.
  #------------------------- Gather parameters -------------------------#
  
  # Static active response parameters
  LOCAL=`dirname $0`
  
  # Extra arguments
  INPUT_JSON=$(cat -)
  YARA_PATH=$(echo $INPUT_JSON | jq -r .parameters.extra_args[1])
  YARA_RULES=$(echo $INPUT_JSON | jq -r .parameters.extra_args[3])
  FILENAME=$(echo $INPUT_JSON | jq -r .parameters.alert.syscheck.path)
  
  # Move to the active response folder
  cd $LOCAL
  cd ../
  
  # Set LOG_FILE path
  PWD=`pwd`
  LOG_FILE="${PWD}/../logs/active-responses.log"
  
  #----------------------- Analyze parameters -----------------------#
  
  if [[ ! $YARA_PATH ]] || [[ ! $YARA_RULES ]]
  then
  echo "wazuh-yara: ERROR - Yara active response error. Yara path and rules parameters are mandatory." >> ${LOG_FILE}
  exit
  fi
  
  #------------------------- Main workflow --------------------------#
  
  # Execute Yara scan on the specified filename
  yara_output="$("${YARA_PATH}"/yara -w -r "$YARA_RULES" "$FILENAME")"
  
  if [[ $yara_output != "" ]]
  then
  # Iterate every detected rule and append it to the LOG_FILE
  while read -r line; do
  echo "wazuh-yara: INFO - Scan result: $line" >> ${LOG_FILE}
  done <<< "$yara_output"
  fi
  
  exit 1;
  
  
.. note:: Make sure that you have `jq <https://stedolan.github.io/jq/>`_ installed, and that the ``yara.sh`` file ownership is ``root:ossec`` and the permissions are ``750``.
  
The script receives these paths:
  
- The file path contained in the alert that triggered the active response in the ``parameters.alert.syscheck.path`` object.

- ``-yara_path``. Path to the folder where the Yara executable is located; by default this is usually ``/usr/local/bin``.

- ``-yara_rules``. File path to the Yara rules file used for the scan.  

The script uses the parameters above to perform a YARA scan:

.. code-block:: none

  # Execute YARA scan on the specified filename
  yara_output="$("${YARA_PATH}"/yara -w -r "$YARA_RULES" "$FILENAME")"

Then it analyzes the output to determine if the scan triggered any YARA rule:

.. code-block:: none

  # Iterate every detected rule and append it to the LOG_FILE
  while read -r line; do
  echo "wazuh-yara: INFO - Scan result: $line" >> ${LOG_FILE}
  done <<< "$yara_output"

For every line in the output, the script appends an event to the active response log, ``/var/ossec/logs/active-responses.log``, with the following format:

.. code-block:: none

  wazuh-yara: INFO - Scan result: yara_rule file_path

.. note:: There's no need to configure the agent to monitor the active response log as it is part of the agent's default configuration.
