.. Copyright (C) 2021 Wazuh, Inc.

.. _integrating-aws-cloudwatch-logs:

Integrating AWS CloudWatch Logs in Wazuh
========================================

The AWS CloudWatch Logs integration was added with the Wazuh 4.0 release. Below, we will focus on setting up Wazuh to collect log files from Amazon EC2 and Fargate instances, AWS CloudTrail, and many other sources supported by CloudWatch Logs.

What is AWS CloudWatch Logs
---------------------------

CloudWatch Logs acts as a central log management service that stores the logs from all the systems, applications, and AWS services. It allows users to see all the logs, regardless of their source, as a single and consistent flow of events ordered by time.

To understand how CloudWatch Logs works, it is necessary to learn about the following concepts and how they are related:

- ``Log events``: CloudWatch saves the logs generated by the application or resource being monitored as log events. A log event is a record with two properties: the timestamp when the event occurred and the raw log message.
- ``Log streams``: Log events are stored in log streams. A log stream represents a sequence of events coming from the application instance or resource being monitored. All log events in a log stream share the same source.
- ``Log groups``: Log streams are grouped using log groups. A log group defines a group of log streams that shares retention, monitoring, and access control settings.
  

How the Wazuh integration works
-------------------------------

The Wazuh CloudWatch Logs integration establishes a connection with CloudWatch using the AWS API and the credentials provided by the user. It will periodically pull the logs contained in the specified log group and send them to the Analysisd component, which will generate an alert if the log message matches with an applicable rule.

Setting it up
-------------

The following diagram shows what we want to accomplish:

.. thumbnail:: ../images/aws/cloudwatch_diagram.png
      :align: center
      :width: 100%


.. note::  
  The following steps describe how to set up the wazuh module. It assumes the user already has CloudWatch Logs configured and working, with some data existing in a log group.

Step 1: Create AWS credentials
------------------------------

Once we have a log group with log events in it, we need to set up credentials so that Wazuh is able to connect and extract those events. We recommend doing this instead of hardcoding the user and password for the AWS account in the ``ossec.conf``. More information about how to configure AWS credentials can be found in the `Wazuh documentation <https://documentation.wazuh.com/current/amazon/services/prerequisites/credentials.html>`_.

For testing purposes, we are going to create a file located at ``~/.aws/credentials`` with the following content to grant us access to CloudWatch:

.. code-block:: xml

    [default]
    aws_access_key_id=<YOUR_AWS_ACCESS_KEY>
    aws_secret_access_key=<YOUR_AWS_SECRET_KEY>

This way we will be able to connect to the AWS account if we specify ``default`` as the AWS profile in the next step.

Step 2: Configure Wazuh
-----------------------

Next we need to indicate in the <WAZUH_HOME>/etc/ossec.conf file that we want to collect logs from CloudWatch Logs by adding the following module. This step is performed on the Wazuh Manager or Agent. For this example we are going to configure it on a Wazuh Manager:


.. code-block:: xml

    <wodle name="aws-s3">
        <disabled>no</disabled>
        <interval>5m</interval>
        <run_on_start>yes</run_on_start>
        <service type="cloudwatchlogs">
            <aws_profile>default</aws_profile>
            <aws_log_groups>example_log_group</aws_log_groups>
            <regions>us-east-1</regions>
        </service>
    </wodle>

Two options stand out from this module:

- ``aws_profile``: The name of the profile defined for granting Wazuh access to the bucket. It allows us to log in with our AWS account and must match with the profile specified in the credentials file created in step 1.
- ``aws_log_groups``: A list of comma-separated log group names where the log streams are saved. In our case, we want to get the logs from a log group named “example_log_group”.
- ``regions``: A list of comma-separated region names where our log groups are stored. In our case, we want to get logs from a single log group in the “us-est-1” region.

.. note::  
   The complete list of parameters available for the CloudWatch Logs service tag in the ``AWS-S3`` module can be found in this list of `Bucket options <https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/wodle-s3.html?highlight=aws%20s3#bucket-options>`_.

.. note::
   It is possible to have multiple Service or Bucket tags inside the aws-s3 module. It allows us to get logs from services like CloudWatch Logs using different credentials and also enables us to have logs from all AWS instances and services in the same place. You can find more information about the `configuration options of the AWS-S3 wodle <https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/wodle-s3.html#wodle-name-aws-s3>`_.

Finally, restart Wazuh to apply the changes, and the CloudWatch alerts will start to appear on the Wazuh UI.

Step 3: Ensure everything is running fine
-----------------------------------------

After restarting, we can ensure everything is working fine by checking the ``<WAZUH_HOME>/logs/ossec.log``. If the following message appears in the log and there are no warnings related to AWS then everything is ready:


.. code-block:: xml

    INFO: Module AWS started
    INFO: Starting fetching of logs.
    INFO: Executing Service Analysis: (Service: cloudwatchlogs, Profile: default)


It is also possible to verify the integration is working as expected by accessing the Wazuh UI.


Troubleshooting
===============
This section covers possible errors that may occur if we have made any mistakes during the configuration process. Those errors will be found in the ``<WAZUH_HOME>/logs/ossec.log file``.

.. note::  
    To increase the verbosity of the messages found in ossec.log you can enable the debug mode for the AWS module by adding the line wazuh_modules.debug=2 to the <WAZUH_HOME>/etc/local_internal_options.conf file and restarting Wazuh.

The config profile could not be found
-------------------------------------


.. code-block:: xml

    INFO: Module AWS started
    INFO: Starting fetching of logs.
    INFO: Executing Service Analysis: (Service: cloudwatchlogs, Profile: default)
    WARNING: Bucket: - Returned exit code 12
    WARNING: Bucket: - The config profile (default) could not be found
    INFO: Fetching logs finished.

This error means that the AWS credentials cannot be found.

**Solution**: Make sure the AWS credentials have been correctly set up as indicated in **Step 1: Create AWS credentials**.

Log group does not exist, or insufficient privileges to access it
-----------------------------------------------------------------


.. code-block:: xml

    DEBUG: ++++ The specified "invalid-log-group" log group does not exist or has insufficient privileges to access it.

This error message appears when one of the following cases happens:

- The credentials specified during the Step 1 do not grant access to the specified log group.
- The specified log group does not exist in the provided region.
- We are not providing a region list using the regions tag. If that is the case, Wazuh will try to find the log group in every single region available. However, it may exist only in one of them. The same applies if we provide a list of regions.

**Solution**: Ensure you are using the right credentials, specifying the proper region, and that the log group is created in that particular region.


Use Case: Getting logs from an Apache HTTP Server instance (httpd)
==================================================================

One of the most useful applications of this integration is the ability to get the logs from our AWS containers and monitor them. In this particular case, we are going to deploy an Apache HTTP server inside a Fargate container and get its logs, so if something happens Wazuh will alert us.

The first thing we need to achieve this is a container generating some logs for us. As an example, we are going to access ``Elastic Container Service > Task Definition`` in AWS Console and create a new TaskDefinition providing ``Fargate`` as the launch type and the following configuration using the Configure via ``JSON button``:


.. code-block:: xml

    {
        "containerDefinitions": [{
            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "awslogs-test-apache",
                    "awslogs-region": "us-east-1",
                    "awslogs-stream-prefix": "awslogs-example"
                }
            },
            "portMappings": [{
                "hostPort": 80,
                "protocol": "tcp",
                "containerPort": 80
            }],
            "image": "httpd:latest",
            "name": "apache"
        }],
        "memory": "512",
        "requiresCompatibilities": ["FARGATE"],
        "cpu": "256",
    }

With this configuration, we will have an instance of httpd running on a Fargate container and sending its logs to a log group called ``awslogs-test-apache`` using ``awslogs-example`` as a prefix for the log streams that will be created inside that log group. Once the TaskDefinition is created, run it and wait until some logs are sent to the log group. The task can be stopped after you have some logs stored.

Having the data already stored in a log group, you only need to allow Wazuh to access those logs by following the instructions in the ``Setting it up`` section.

Once Wazuh has access to the logs, they will be fetched. We need to ensure that we are using the proper ``only_logs_after`` value.

The events raised by AWS CloudWatch Logs can be found in ``Wazuh > Security Information Management > Security events``:


.. thumbnail:: ../images/aws/security_information_management.png
      :align: center
      :width: 100%


.. thumbnail:: ../images/aws/dashboard.png
      :align: center
      :width: 100%


The CloudWatch logs generated by Apache did not contain any message that could raise an alert, but they matched with the Apache rule 30303 located in ``<wazuh_path>/ruleset/rules/0250-apache_rules.xml``. For testing purposes, we changed the alert level of that rule from 0 to 10 to generate an alert and visualize them in Wazuh UI.


.. thumbnail:: ../images/aws/Security_events.png
      :align: center
      :width: 100%


Thanks to the Wazuh ``AWS-S3`` module, we can pull and analyze events from CloudWatch Logs. As a result, we can be aware of errors, misconfigurations, attempted malicious activities, and many other security concerns for our AWS applications, services, and systems. Once the logs are collected, we can take advantage of all the valuable capabilities that Wazuh offers, such as reacting to any alert using our Active Response module.

As it has been shown, Wazuh stands out as an unified platform that allows us to monitor and secure our AWS services and S3 buckets, along with every other monitored service or machine, regardless they are on-premise or on-demand.


References
==========

- `Configuring AWS credentials <https://documentation.wazuh.com/3.12/amazon/services/prerequisites/credentials.html>`_
- `Wazuh AWS-S3 Wodle options <https://documentation.wazuh.com/3.12/user-manual/reference/ossec-conf/wodle-s3.html>`_
- `Using Wazuh to monitor AWS <https://documentation.wazuh.com/3.12/amazon/index.html>`_
- `Integrating Amazon Macie in Wazuh <https://wazuh.com/blog/integrating-amazon-macie-in-wazuh/>`_
- `Integrating AWS CloudTrail in Wazuh <https://wazuh.com/blog/integrating-aws-cloudtrail-in-wazuh/>`_
- `AWS CloudWatch Logs official documentation <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html>`_
 