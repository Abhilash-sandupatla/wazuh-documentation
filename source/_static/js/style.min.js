$(function() { const version = '' + $('[data-version]').data('version'); const minVersionScreenshot = '3.13'; const minVersionRedoc = '4.0'; const simultaneousCapaSlide = (compareVersion(version, minVersionScreenshot) >= 0); const useApiRedoc = (compareVersion(version, minVersionRedoc) >= 0); const excludedSearchFolders = ['release-notes']; const intervalTime = 5000; let capaInterval = null; if ( useApiRedoc ) { const domainReplacePattern = 'https://DOMAIN'; const urlRoot = $('[data-url_root]').length == 0 ? '/' : $('[data-url_root]').data('url_root'); $('[href^="'+domainReplacePattern+'/"]').each(function() { const oldHref = $(this).attr('href'); $(this).attr('href', oldHref.replace(domainReplacePattern+'/', urlRoot)); $(this).attr('target', '_blank'); }); } const emptyTocNodes = [ 'amazon/configuration/index', 'compliance', 'containers', 'deployment', 'development/index', 'docker-monitor/index', 'installation-guide/elasticsearch-cluster/index', 'installation-guide/wazuh-cluster/index', 'installation-guide/upgrading/legacy/index', 'installation-guide/packages-list/linux/linux-index', 'installation-guide/packages-list/solaris/solaris-index', 'monitoring', 'user-manual/index', 'user-manual/agents/index', 'user-manual/agents/remove-agents/index', 'user-manual/agents/listing/index', 'user-manual/kibana-app/reference/index', 'user-manual/ruleset/ruleset-xml-syntax/index', 'installation-guide/distributed-deployment/step-by-step-installation/elasticsearch-cluster/index', 'installation-guide/distributed-deployment/step-by-step-installation/wazuh-cluster/index', 'user-manual/capabilities/active-response/ar-use-cases/index', ]; const newTabNodes = [ 'user-manual/api/reference', 'cloud-service/apis/reference', ]; if ( useApiRedoc ) { markTocNodesWithClass(newTabNodes, 'js-new-tab'); $('.js-new-tab').attr('target', '_blank'); $('#main-content .reference.internal').each(function() { const linkRef = this; newTabNodes.forEach(function(item) { if (linkRef.href.indexOf(item) !== -1) { $(linkRef).attr('target', '_blank'); return; } }); }); } const hideSubtreeNodes = [ 'Install Wazuh manager on Linux', 'Install Wazuh agent on Linux', ].map(function(item) { return item.toLowerCase(); }); markTocNodesWithClass(emptyTocNodes, 'empty-toc-node'); checkScroll(); $('.globaltoc .toctree-l1 a').each(function(e) { if ($(this).siblings('ul').length) { $(this).closest('li').addClass('toc-toggle'); $(this).append($('<button class="toc-toggle-btn"><span class="toc-toggle-icon"></span></button>')); } }); hideSubtree(hideSubtreeNodes); reponsiveTables(); function reponsiveTables() { $('#main-content table').each(function() { if ($(this).width() > $('main').width()) { $(this).addClass('table-responsive'); } }); } $('#btn-scroll').on('click', function() { $('html, body').animate({scrollTop: 0}, 'smooth'); return false; }); $(window).on('scroll', function(e) { const scrollYTopPosition = e.currentTarget.pageYOffset; if (scrollYTopPosition >= $(window).height() * .50) { $('#btn-scroll').fadeIn('slow'); } else { $('#btn-scroll').fadeOut('slow'); } checkScroll(); }); function checkScroll() { const scrollTop = $(document).scrollTop(); const headerHeight = parseInt($('#header').outerHeight()); if (scrollTop >= headerHeight) { $('body').addClass('scrolled'); } else { $('body').removeClass('scrolled'); } } let navbarTop = parseInt($('#header').outerHeight()); let noticeHeight = 0; if ($('#page').hasClass('no-latest-docs')) { noticeHeight = parseInt($('.no-latest-notice').outerHeight()); } let documentScroll = $(window).scrollTop(); let disableScroll = false; let scrollDirection = 'down'; let hoverDocument = 'document'; let eventScroll; heightNavbar(); setTimeout(function() { if ($('#page').hasClass('no-latest-docs')) { noticeHeight = parseInt($('.no-latest-notice').outerHeight()); } }, 500); $('#header, #main-content').on('mouseenter', function() { hoverDocument = 'document'; }); $('#navbar-globaltoc').on('mouseenter', function() { hoverDocument = 'navbar'; }); $(window).on('resize', function(e) { windowHeight = window.innerHeight; documentHeight = $(document).outerHeight(); documentScroll = $(window).scrollTop(); containerNavHeight = parseInt($('#navbar-globaltoc').outerHeight()); navHeight = parseInt($('#globaltoc').outerHeight()); if ($('#page').hasClass('no-latest-docs')) { noticeHeight = parseInt($('.no-latest-notice').outerHeight()); } if ($(window).outerWidth() >= 992) { $('html').css({'overflow-y': 'auto'}); } heightNavbar(); adjustLightboxHeight(); }); const mousewheelevt = (/Firefox/i.test(navigator.userAgent)) ? 'DOMMouseScroll' : 'wheel'; if (document.getElementById('navbar-globaltoc').addEventListener) { document.getElementById('navbar-globaltoc').addEventListener(mousewheelevt, function(e) { eventScroll = 'mousewheel'; const delta = ((e.deltaY || -e.wheelDelta || e.detail) >> 10) || 1; if (delta < 0) { scrollDirection = 'up'; } else if (delta > 0) { scrollDirection = 'down'; } enableDisableScroll(); if (disableScroll) { e.preventDefault(); e.stopPropagation(); return false; } }, {passive: false}); } $('#navbar-globaltoc').keydown(function(e) { eventScroll = 'keys'; let arrowKeys = false; if (e.which == 38) { arrowKeys = true; scrollDirection = 'up'; } if (e.which == 40) { arrowKeys = true; scrollDirection = 'down'; } enableDisableScroll(); if (arrowKeys) { if (disableScroll) { return false; } } }); $(document).keydown(function(e) { if ( (e.which == 38 || e.which == 40) && hoverDocument == 'navbar' ) { eventScroll = 'keys'; let arrowKeys = false; if (e.which == 38) { arrowKeys = true; scrollDirection = 'up'; } if (e.which == 40) { arrowKeys = true; scrollDirection = 'down'; } enableDisableScroll(); if (arrowKeys) { if (disableScroll) { return false; } } } }); function enableDisableScroll() { const ele = document.getElementById('navbar-globaltoc'); navbarHeight = parseInt(ele.scrollHeight) - parseInt($(ele).outerHeight()); navbarScroll = $(ele).scrollTop(); if (navbarScroll == navbarHeight && scrollDirection == 'down' && eventScroll == 'mousewheel') { disableScroll = true; } else if (navbarScroll == 0 && scrollDirection == 'up' && eventScroll == 'mousewheel') { disableScroll = true; } else if (navbarScroll == navbarHeight && scrollDirection == 'down' && eventScroll == 'keys' && hoverDocument == 'navbar') { disableScroll = true; } else if (navbarScroll == 0 && scrollDirection == 'up' && eventScroll == 'keys' && hoverDocument == 'navbar') { disableScroll = true; } else { disableScroll = false; } } $(window).on('scroll', function(e) { windowHeight = window.innerHeight; documentHeight = $(document).outerHeight(); documentScroll = $(window).scrollTop(); containerNavHeight = parseInt($('#navbar-globaltoc').outerHeight()); navHeight = parseInt($('#globaltoc').outerHeight()); heightNavbar(); }); $('.navbar-toggler').on('click', function(e) { if ($(this).hasClass('collapsed')) { $('html').css({'overflow-y': 'hidden'}); } else { $('html').css({'overflow-y': 'auto'}); } }); function heightNavbar() { const noticeElement = $('.no-latest-notice'); noticeHeight = noticeElement.length == 0 ? 0 : parseInt(noticeElement.outerHeight()); if ($(window).width() >= 992) { if (!$('body').hasClass('scrolled')) { navbarTop = parseInt($('#header').outerHeight()); $('#navbar').css({'padding-top': (navbarTop - documentScroll) + 'px'}); $('#navbar-globaltoc').css({'height': 'calc(100vh - ' + (parseInt($('#navbar .search_main').outerHeight()) + parseInt($('#header').outerHeight())) + 'px + ' + documentScroll + 'px)', 'padding-top': 0}); } else { $('#navbar').css({'padding-top': noticeHeight +'px'}); $('#navbar-globaltoc').css({'height': 'calc(100vh - ' + noticeHeight + 'px - ' + parseInt($('#header-sticky').outerHeight()) + 'px)', 'padding-top': 0}); } } else { navbarTop = parseInt($('#header-sticky').outerHeight()); if (documentScroll <= navbarTop) { $('#navbar').css({'padding-top': 0}); $('#navbar-globaltoc').css({'padding-top': (noticeHeight + 100) + 'px'}); } else { $('#navbar').css({'padding-top': 0}); $('#navbar-globaltoc').css({'padding-top': (noticeHeight + 52) + 'px'}); } } } $('.globaltoc a .toc-toggle-btn').on('click', function(e) { li = $(e.target).closest('li'); if (!li || li.children('ul').length == 0) { return true; } e.stopPropagation(); e.preventDefault(); if (li.hasClass('show')) { li.removeClass('show'); } else { li.siblings('li').removeClass('show'); li.addClass('show'); } if (!li.parents().hasClass('show')) { $('.globaltoc li.show').addClass('show'); } $('.globaltoc li.initial').removeClass('initial'); completelyHideMenuItems(); return false; }); function completelyHideMenuItems() { $('#navbar-globaltoc li ul').each(function() { if ($(this).closest('li').hasClass('show')) { this.hidden = false; $(this).slideDown(300); } else { $(this).slideUp(300, function() { this.hidden = true; }); } }); } function markTocNodesWithClass(nodeList, className) { let regex; const curLocation = location.href.split('#')[0]; nodeList.forEach(function(tocNode) { emptyNode = '.+\/' + tocNode + '.html'; regex = new RegExp(emptyNode, 'g'); $('.globaltoc a').each(function() { const href = $(this).prop('href').split('#')[0]; const isCurrent = (href === curLocation); if (regex.test(href) || isCurrent) { $(this).addClass(className); } }); }); } function hideSubtree(nodeList) { $('#globaltoc a').each(function() { if (jQuery.inArray($(this).text().toLowerCase(), nodeList) !== -1) { $(this).siblings().hide(); $(this).children('button').hide(); } }); } $('.globaltoc .empty-toc-node').each(function() { $(this).on('click', function(e) { e.preventDefault(); $(this).find('.toc-toggle-btn').click(); }); }); $('.globaltoc .current-toc-node').each(function() { $(this).on('click', function(e) { e.preventDefault(); $('html, body').animate({scrollTop: 0}, '500'); }); }); $(window).on('resize', function(e) { $('table').removeClass('table-responsive'); reponsiveTables(); checkScroll(); }); if ($(window).outerWidth() < 1200) { $('#capabilities .left .topic.active p').not('.topic-title').slideDown(300); } $(window).resize(function() { clearInterval(capaInterval); if ($(window).outerWidth() >= 1200) { if (simultaneousCapaSlide) { initCapabilities(); } $('#capabilities .left .topic p').not('.topic-title').css({'display': 'none'}); if ($('#capabilities .left .topic.active').length > 0) { capabilitiesHome($('#capabilities .left .topic.active')); } else { capabilitiesHome($('#capabilities .left .topic').first()); } } else { if (simultaneousCapaSlide) { stopCapabilities(); } $('#capabilities .left .topic.active p').not('.topic-title').css({'display': 'block'}); } }); $('#capabilities .left .topic').click(function() { capabilitiesHome(this, simultaneousCapaSlide); }); if ($(window).outerWidth() >= 1200 && simultaneousCapaSlide ) { initCapabilities(); } if ( simultaneousCapaSlide ) { $('.screenshots .carousel').carousel({ interval: intervalTime, }); $('.capab .topic, .screenshots .carousel').on('click', function() { $('.carousel').carousel('pause'); clearInterval(capaInterval); }); } function initCapabilities() { capaInterval = setInterval(function() { changeCapabilityNext(true); }, intervalTime); $('.screenshots .carousel .carousel-control-prev, .screenshots .carousel .carousel-control-next').click(function() { $('.screenshots .carousel').one('slide.bs.carousel', function(carousel) { changeCapabilityTo(carousel.to, false); }); }); } function stopCapabilities() { $('.screenshots .carousel .carousel-control-prev, .screenshots .carousel .carousel-control-next').off(); } function changeCapabilityTo(capaindex, auto) { const topics = $('#capabilities .left .topic'); capabilitiesHome(topics.eq(capaindex), auto); } function changeCapabilityNext(auto) { const topics = $('#capabilities .left .topic'); const active = $('#capabilities .left .topic.active'); let capaindex = topics.index(active); capaindex = (capaindex+1) % topics.length; capabilitiesHome(topics.eq(capaindex), auto); } function capabilitiesHome(ele, auto) { let eleOther = ele; let active = false; const item = $('#capabilities .left .topic').index(ele); if ($('#page.index').length > 0) { if ($(ele).hasClass('active')) { active = true; } else { eleOther = $('#capabilities .left .topic.active'); } if ($('#capabilities .left .topic.active').length <= 0) { eleOther = false; } if ( auto ) { $('.screenshots .carousel').carousel(item); } if ($(window).outerWidth() >= 1200) { let className = ''; className = $(ele).attr('class'); className = className.replace(' topic', ''); className = className.replace(' active', ''); const posBox = $('#capabilities .left').offset(); const posTopic = $(ele).offset(); $('#capabilities .topic').removeClass('active'); $('#capabilities .right .topic.' + className).addClass('active'); let pos = posTopic.top - posBox.top - 4; if (pos <= 0) { pos = 0; } $('#capabilities .line').css({'height': pos + 'px'}); $(ele).addClass('active'); } else { if (eleOther != false) { $(eleOther).find('p').not('.topic-title').slideUp(300, function() { setTimeout(function() { $(eleOther).removeClass('active'); }, 100); setTimeout(function() { if (!active) { $(ele).addClass('active'); $(ele).find('p').not('.topic-title').slideDown(300); } }, 100); }); } else { $(ele).addClass('active'); $(ele).find('p').not('.topic-title').slideDown(300); } } } } const searchResults = $('#search-results'); if (searchResults.length > 0) { let lastResult = null; let splitURL = null; const configAdd = {childList: true}; let observerResults = null; let observerResultList = null; let observerResultText = null; let i = 0; const addedResult = function(mutationsList, observer) { for (i = 0; i < mutationsList.length; i++) { if (mutationsList[i].type === 'childList') { lastResult = $('ul.search li:last-child'); splitURL = lastResult.children('a').prop('href').split('/'); $.each(excludedSearchFolders, function(index, value) { if ($.inArray(value, splitURL) !== -1) { lastResult.addClass('excluded-search-result'); lastResult.addClass('hidden-result'); return false; } }); } } }; const existsResultList = function(mutationsList, observer) { for (i = 0; i < mutationsList.length; i++) { if (mutationsList[i].type === 'childList' && $(mutationsList[i].addedNodes[0]).hasClass('search')) { const ulSearch = $('ul.search'); observerResults.disconnect(); observerResultList = new MutationObserver(addedResult); observerResultList.observe(ulSearch[0], configAdd); observerResultText = new MutationObserver(changeResultText); observerResultText.observe($('#search-results > p')[0], configAdd); } } }; const changeResultText = function(mutationsList, observer) { for (i = 0; i < mutationsList.length; i++) { if (mutationsList[i].type === 'childList') { observerResultText.disconnect(); const totalResults = $('ul.search li').length; const excludedResults = $('ul.search li.excluded-search-result').length; let resultText = ''; if (totalResults > 0) { if (excludedResults > 0) { resultText = 'Search finished. Found <span id="n-results">' + (totalResults - excludedResults) + '</span> page(s) matching the search query. <a id="toggle-results" class="include" href="#">Include Release Notes results</a>'; } else { resultText = 'Search finished. Found <span id="n-results">' + totalResults + '</span> page(s) matching the search query.'; } $('#search-results > p:first').html(resultText); } } } }; observerResults = new MutationObserver(existsResultList); observerResults.observe(searchResults[0], configAdd); $(document).delegate('#search-results #toggle-results.include', 'click', function() { const toggleButton = $(this); const excludedResults = $('ul.search li.excluded-search-result'); toggleButton.text(toggleButton.text().replace('Include', 'Exclude')); toggleButton.removeClass('include').addClass('exclude'); $('#search-results #n-results').text($('ul.search li').length); excludedResults.each(function(e) { currResult = $(this); currResult.hide(0, function() { $(this).removeClass('hidden-result'); }); currResult.show('fast'); }); }); $(document).delegate('#search-results #toggle-results.exclude', 'click', function() { const toggleButton = $(this); const excludedResults = $('ul.search li.excluded-search-result'); toggleButton.text(toggleButton.text().replace('Exclude', 'Include')); toggleButton.removeClass('exclude').addClass('include'); $('#search-results #n-results').text($('ul.search li').length - excludedResults.length); excludedResults.each(function(e) { currResult = $(this); currResult.hide('fast', function() { $(this).addClass('hidden-result'); }); }); }); } $('a[data-lightbox]').on('click', function() { const topheight = $('body').hasClass('scrolled') ? 101 : 152; const topValue = $('.side-scroll').offset().top; $('html, body').css('overflow', 'hidden'); $('#lightboxOverlay').width('100%'); $('.side-scroll').attr('style', $('.side-scroll').attr('style') + 'position: relative; top: ' + (topValue - topheight) + 'px'); }); $('#lightboxOverlay, #lightbox, #lightbox .lb-close').on('click', function(e) { $('html, body').css('overflow', ''); $('.side-scroll').removeAttr('style'); }); $('#lightbox .lb-details span, #lightbox .lb-dataContainer :not(.lb-close)').on('click', function(e) { e.stopPropagation(); $('html, body').css('overflow', 'hidden'); }); adjustLightboxHeight(); function adjustLightboxHeight() { const noLatestElement = $('.no-latest-notice'); if ( noLatestElement.length > 0) { const noLatestHeight = noLatestElement[0].offsetHeight; $('#lightbox').css('margin-top', noLatestHeight); } } $(document).on('keydown', function(e) { if (e.keyCode == 27) { $('html, body').css('overflow', ''); } }); $('.highlight').each(function() { const blockCode = $(this).parent(); if (!blockCode.hasClass('output') && !blockCode.hasClass('no-copy')) { blockCode.prepend('<button type="button" class="copy-to-clipboard" title="Copy to clipboard"><span>Copied to clipboard</span><i class="far fa-copy" aria-hidden="true"></i></button>'); } else { if (blockCode.hasClass('output')) { blockCode.prepend('<div class="admonition admonition-output"><p class="first admonition-title">Output</p></div>'); } } if (blockCode.hasClass('escaped-tag-signs')) { let data = $(this).html(); const datafragments = data.split(/\\</); data = ''; datafragments.forEach(function(ltFragment, i) { if (i != 0) { gtFragments = ltFragment.split(/&gt;/); ltFragment = gtFragments.shift(); if (gtFragments.length) { ltFragment += '\\>' + gtFragments.join('>'); } } if (i != datafragments.length - 1) { data += ltFragment + '\\<'; } else { data += ltFragment; } }); $(this).html(data); } }); $('.copy-to-clipboard').click(function() { const ele = $(this); let data = $(ele).parent().find('.highlight'); data = filterCodeBlock(data, $(ele).parent()); copyToClipboard(data); $(ele).addClass('copied'); $(ele).find('i').css({'display': 'none'}).find('span').css({'display': 'block'}); $(ele).find('span').css({'display': 'block'}); setTimeout(function() { $(ele).removeClass('copied'); }, 700); setTimeout(function() { $(ele).find('span').css({'display': 'none'}); $(ele).find('i').css({'display': 'block'}); $(ele).focus(); }, 1000); }); function filterCodeBlock(code, parent) { let data = code.text(); const heredocs = findHeredocs(code); data = String(data); if ( !parent.hasClass('highlight-none') ) { data = data.replace(/(^|\n)\s*(\.\s{0,1}){3}\s*($|\n)/g, '\n'); data = data.replace(/(.+]\$\s)/g, ''); data = data.replace(/(.+]\#\s)/g, ''); data = data.replace(/ansible@ansible:.+\$\s/g, ''); data = data.replace(/mysql>\s/g, ''); data = data.replace(/sqlite>\s/g, ''); data = data.replace(/Query\s.+\)\n/g, ''); data = data.replace(/.+@.+:.+(\#|\$)\s/g, ''); data = data.replace(/^>\s/g, ''); data = data.replace(/\n>\s/g, '\n'); data = data.replace(/(?:\$\s)/g, ''); data = data.replace(/\n{2,}$/g, '\n'); if (!parent.hasClass('highlight-yaml') && !parent.hasClass('highlight-python') && !parent.hasClass('highlight-perl') && !parent.hasClass('highlight-powershell') && !parent.is($('[class*="conf"]'))) { const isBash = parent.hasClass('highlight-bash'); const isConsole = parent.hasClass('highlight-console'); if (/<<[^<]/.test(data)) { data = replacePromptOnHeredoc(data, heredocs, isConsole, isBash); } else { data = filterPrompt(data, isConsole, isBash); } } } data = data.trim(); return data; } function copyToClipboard(data) { const aux = document.createElement('textarea'); aux.value = data; document.body.appendChild(aux); aux.select(); document.execCommand('copy'); document.body.removeChild(aux); } $('.highlight').each(function() { const ele = $(this); const data = ele.html(); if (!ele.parent().hasClass('highlight-none')) { const heredocs = findHeredocs(data); const find = data.match(/(?:\$\s|\#)/g); if (find != null) { const dataArray = data.split('\n'); const content = []; dataArray.forEach(function(line, i) { const heredocstart = heredocs.find( ({start}) => start === i ); const heredocfinish = heredocs.find( ({finish}) => finish === i ); const heredoc = heredocs.find( ({start, finish}) => start < i && finish > i ); if ( heredocstart ) { line = '<span class="heredoc">'+line; } else if (heredocfinish) { line = line+'</span>'; } else if (!heredoc) { line = line.replace('<span class="gp">#</span> ', '<span class="gp no-select"># </span>'); line = line.replace('<span class="gp">$</span> ', '<span class="gp no-select">$ </span>'); line = line.replace(/(?:\$\s)/g, '<span class="no-select">$ </span>'); } content.push(line); }); ele.html(content.join('\n')); } } }); $('#select-version a.disable').click(function(e) { e.preventDefault(); e.stopPropagation(); return false; }); $('.dropdown-menu li a').each(function() { if ( $(this).text().indexOf(DOCUMENTATION_OPTIONS.VERSION) != -1 && $(this).hasClass('disable') ) { $('#rst-content').addClass('deprecated-content'); } }); }); function closes(open, close) { return close.replace(/[-\\'"]/g, '') == open.replace(/[-\\'"]/g, ''); } function findHeredocs(code) { const lines = $(code).text().split('\n'); const heredocs = []; let inHereDoc = false; let limitString; let start; let finish; lines.forEach((line, i) => { if (inHereDoc) { if (closes(limitString, line.trim())) { inHereDoc = false; finish = i-1; if (finish > start) { heredocs.push({start: start, finish: finish}); } } } else if (/<<[^<]/.test(line)) { inHereDoc = true; start = i+1; limitString = line.split('<<')[1].trim(); } }); return heredocs; } function filterPrompt(data, isConsole = false, isBash = false) { if (!isBash) { data = data.replace(/(?:\#\s)/g, ''); } if (isConsole || isBash) { data = data.replace(/(^|\n)\/\/.+/g, ''); data = data.replace(/\n{2,}/g, '\n'); } return data; } function replacePromptOnHeredoc(code, heredocs, isConsole = false, isBash = false) { const parsed = []; const lines = code.split('\n'); lines.forEach(function(line, i) { const heredoc = heredocs.find( ({start, finish}) => start <= i && finish >= i ); if ( !heredoc ) { line = filterPrompt(line, isConsole, isBash); } parsed.push(line); }); return parsed.join('\n'); } function compareVersion(version1, version2) { let result = false; if ( typeof(version1) == 'string' && typeof(version2) == 'string') { let v1 = version1.split('.'); let v2 = version2.split('.'); if ( v1.length >= 2 && v2.length >= 2 ) { v1 = v1.map((x) =>parseInt(x)); v2 = v2.map((x) =>parseInt(x)); if ( v1[0] > v2[0] ) { result = 1; } else if ( v1[0] < v2[0] ) { result = -1; } else { if ( v1[1] > v2[1] ) { result = 1; } else if ( v1[1] < v2[1] ) { result = -1; } else { result = 0; } } } } return result; } 