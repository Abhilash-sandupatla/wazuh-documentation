jQuery(function($) { const currentVersion = '4.2'; const versions = [ {name: '4.2 (current)', url: '/current'}, {name: '4.1', url: '/4.1'}, {name: '4.0', url: '/4.0'}, {name: '3.13', url: '/3.13'}, {name: '3.12', url: '/3.12'}, {name: '3.11', url: '/3.11'}, {name: '3.10', url: '/3.10'}, {name: '3.9', url: '/3.9'}, {name: '3.8', url: '/3.8'}, {name: '3.7', url: '/3.7'}, {name: '3.6', url: '/3.6'}, {name: '3.5', url: '/3.5'}, {name: '3.4', url: '/3.4'}, {name: '3.3', url: '/3.3'}, {name: '3.2', url: '/3.2'}, {name: '3.1', url: '/3.1'}, {name: '3.0', url: '/3.0'}, {name: '2.1', url: '/2.1'}, ]; checkCurrentVersion(); let documentHistory = addVersions(); $(window).on('hashchange', function() { documentHistory = addVersions(); }); checkLatestDocs(documentHistory); const documentInReleases = Object.keys(documentHistory); let canonicalRelease = documentInReleases[documentInReleases.length-1]; const canonicalPath = documentHistory[canonicalRelease]; if ( canonicalRelease == currentVersion ) { canonicalRelease = 'current'; } const canonicalTag = !!document.querySelector('link[rel=\'canonical\']') ? document.querySelector('link[rel=\'canonical\']') : document.createElement('link'); canonicalTag.setAttribute('rel', 'canonical'); canonicalTag.setAttribute('href', document.location.protocol + '//' + document.location.host + '/' + canonicalRelease + canonicalPath); document.head.appendChild(canonicalTag); $('#select-version [data-toggle="tooltip"]').tooltip(); function checkCurrentVersion() { let selected = -1; let thisVersion = DOCUMENTATION_OPTIONS.VERSION; const selectVersionCurrent = $('#select-version .current'); if ( thisVersion == currentVersion ) { thisVersion = 'current'; } for (let i = 0; i < versions.length; i++) { if ( versions[i].url.indexOf('/' + thisVersion) > -1 ) { selected = i; } } if ( versions[selected] ) { selectVersionCurrent.html(versions[selected].name); } else { selectVersionCurrent.html(DOCUMENTATION_OPTIONS.VERSION); } } function checkLatestDocs(redirHistory) { const thisVersion = DOCUMENTATION_OPTIONS.VERSION; const latestVersion = currentVersion; let page = ''; if ( thisVersion !== latestVersion ) { const pageElement = document.querySelector('#page'); pageElement.classList.add('no-latest-docs'); page = document.location.pathname; if ( page[page.length-1] == '/') { page = page+'index.html'; } if ( page.indexOf(thisVersion) != -1 ) { page = page.split('/'+thisVersion)[1]; } else if ( page.indexOf('current') != -1 ) { page = page.split('/current')[1]; } const link = document.querySelector('.link-latest'); let targetURL = 'https://' + window.location.hostname + '/current'; if ( documentHistory.hasOwnProperty(latestVersion) ) { targetURL = targetURL + redirHistory[latestVersion]; } link.setAttribute('href', targetURL); } } function addVersions() { let ele = ''; const selectVersionUl = $('#select-version .dropdown-menu'); const thisVersion = DOCUMENTATION_OPTIONS.VERSION; let fullUrl = window.location.href; let page = ''; let paramDivision = []; let param = ''; if (fullUrl == null) { fullUrl = document.URL; } page = fullUrl.split(document.location.host)[1]; if ( page[page.length-1] == '/' ) { page = page+'index.html'; } if ( page.indexOf(thisVersion) != -1 ) { page = page.split('/'+thisVersion)[1]; } else if ( page.indexOf('current') != -1 ) { page = page.split('/current')[1]; } paramDivision = page.split('?'); page = normalizeUrl(paramDivision[0]); param = paramDivision.length == 2 ? ('?'+paramDivision[1]) : ''; let href; let tooltip; let ver; let versionsClean = versions.map(function(i) { return (i.name).split(' (current)')[0]; }); for (let i = 0; i < versionsClean.length; i++) { if ( newUrls[versionsClean[i]] ) { newUrls[versionsClean[i]] = newUrls[versionsClean[i]].map(function(url) { return normalizeUrl(url); }); } if ( removedUrls[versionsClean[i]] ) { removedUrls[versionsClean[i]] = removedUrls[versionsClean[i]].map(function(url) { return normalizeUrl(url); }); } } for (let i = 0; i < redirections.length; i++) { for ( release in redirections[i] ) { if (Object.prototype.hasOwnProperty.call(redirections[i], release)) { redirections[i][release] = normalizeUrl(redirections[i][release]); } } } const redirHistory = getRedirectionHistory(versionsClean, thisVersion, page, newUrls, redirections, removedUrls); versionsClean = versionsClean.reverse(); for (let i = 0; i < versions.length; i++) { href = ''; tooltip = ''; ver = versionsClean[i]; if ( redirHistory[ver] != null && redirHistory[ver].length ) { if ( ver == currentVersion ) { href = '/current'+redirHistory[ver]+param; } else { href = '/'+ver+redirHistory[ver]+param; } } else { tooltip = 'class="disable" data-toggle="tooltip" data-placement="left" title="This page is not available in version ' + versions[i].name +'"'; } ele += '<li><a href="' + href + '" '+ tooltip +'>'+versions[i].name+'</a></li>'; if (ver == currentVersion) { $('.no-latest-notice .link-latest').attr('href', href); } } selectVersionUl.html(ele); return redirHistory; } function normalizeUrl(originalUrl) { if (!Array.isArray(originalUrl)) { let normalizedURL = originalUrl.trim().replace('index.html', ''); normalizedURL = normalizedURL.replace(/\/{2,}/, '/'); if (normalizedURL.charAt(normalizedURL.length-1) == '#' ) { normalizedURL = normalizedURL.substring(0, normalizedURL.length-1); } if (normalizedURL.charAt(normalizedURL.length-1) != '/' && !(/.*(\.html|#.*)$/.test(normalizedURL))) { normalizedURL = normalizedURL+'/'; } if (normalizedURL.charAt(0) != '/') { normalizedURL = '/'+normalizedURL; } if (!checkEncodeURI(normalizedURL)) { normalizedURL = encodeURI(normalizedURL); } return normalizedURL; } else { return originalUrl; } } function getRedirectionHistory(versions, verCurrent, page, newUrls, redirections, removedUrls) { const rtn = []; const historyArray = []; historyArray[verCurrent] = page; let cellTemp = []; versions = versions.reverse(); const verCurrentNum = getReleaseNum(verCurrent, versions); let direction = 'toBoth'; if (verCurrentNum == versions.length) { direction = 'toBottom'; } if (verCurrentNum == 0) { direction = 'toTop'; } cellTemp.push({ 'page': page, 'version': verCurrent, 'versionNum': verCurrentNum, 'direction': direction, }); let count = 0; while (cellTemp.length) { const analyzeUrl = cellTemp.pop(); let infoUrl = getInfoRedirectUrl(analyzeUrl['page'], redirections); let logic = getLogicRedirects(analyzeUrl, infoUrl, versions); if (logic.length == 0) { const pageHashArray = analyzeUrl['page'].split('#'); if ( pageHashArray.length > 1 ) { infoUrl = getInfoRedirectUrl(pageHashArray[0], redirections); if (infoUrl.length != 0) { analyzeUrl['page'] = pageHashArray[0]; } } logic = getLogicRedirects(analyzeUrl, infoUrl, versions); } while (logic.length) { const forLogic = logic.pop(); const p = forLogic['url']; const v = forLogic['release']; const d = forLogic['direction']; const vn = getReleaseNum(forLogic['release'], versions); const urlNew = { 'page': p, 'version': v, 'versionNum': vn, 'direction': d, }; cellTemp.push(urlNew); historyArray[v] = p; } if (count >= 1000) { cellTemp = []; return false; } count++; } historyArray1 = fillUrls('toBottom', historyArray, verCurrentNum, versions); historyArray2 = fillUrls('toTop', historyArray, verCurrentNum, versions); for (x in historyArray1) { if ({}.hasOwnProperty.call(historyArray1, x)) { rtn[x] = historyArray1[x]; } } for (x in historyArray2) { if ({}.hasOwnProperty.call(historyArray2, x)) { rtn[x] = historyArray2[x]; } } const pageCreated = getInfoNewsUrl(rtn[versions[0]], newUrls); if (pageCreated !== false) { const pageCreatedNum = getReleaseNum(pageCreated['release'], versions); for (r in rtn) { if ({}.hasOwnProperty.call(rtn, r)) { const rNum = getReleaseNum(r, versions); if (parseInt(rNum) < parseInt(pageCreatedNum)) { delete rtn[r]; } } } } const pageRemoved = getInfoRemovedUrl(rtn[versions[versions.length-1]], removedUrls); if (pageRemoved !== false) { const pageRemovedNum = getReleaseNum(pageRemoved['release'], versions); for (r in rtn) { if ({}.hasOwnProperty.call(rtn, r)) { const rNum = getReleaseNum(r, versions); if (parseInt(rNum) >= parseInt(pageRemovedNum)) { delete rtn[r]; } } } } return rtn; } function getReleaseNum(key, versions) { let verKey = -1; for (i in versions) { if (key == versions[i]) { verKey = i; } } return verKey; } function getInfoRedirectUrl(page, redirections) { const redirectionsTemp = []; for (forId in redirections) { if ({}.hasOwnProperty.call(redirections, forId)) { for (forRelease in redirections[forId]) { if (forRelease != 'target') { if (page == redirections[forId][forRelease]) { redirectionsTemp.push(redirections[forId]); } } } } } return redirectionsTemp; } function getInfoNewsUrl(page, newUrls) { let newUrlsTemp = false; for (forRelease in newUrls) { if ({}.hasOwnProperty.call(newUrls, forRelease)) { for (forUrl in newUrls[forRelease]) { if ({}.hasOwnProperty.call(newUrls[forRelease], forUrl)) { const pageWithoutHash = page.split('#')[0]; if (pageWithoutHash == newUrls[forRelease][forUrl]) { newUrlsTemp = []; newUrlsTemp['release'] = forRelease; newUrlsTemp['url'] = newUrls[forRelease][forUrl]; } } } } } return newUrlsTemp; } function getInfoRemovedUrl(page, removedUrls) { let removedUrlsTemp = false; for (forRelease in removedUrls) { if ({}.hasOwnProperty.call(removedUrls, forRelease)) { for (forUrl in removedUrls[forRelease]) { if ({}.hasOwnProperty.call(removedUrls[forRelease], forUrl)) { const pageWithoutHash = page.split('#')[0]; if (pageWithoutHash == removedUrls[forRelease][forUrl]) { removedUrlsTemp = []; removedUrlsTemp['release'] = forRelease; removedUrlsTemp['url'] = removedUrls[forRelease][forUrl]; } } } } } return removedUrlsTemp; } function getLogicRedirects(analyzeUrl, infoUrl, versions) { const relatedUrl = []; const infoUrlRedirects = infoUrl; while (infoUrlRedirects.length) { const redirect = infoUrlRedirects.pop(); for (forTarget in redirect['target']) { if ({}.hasOwnProperty.call(redirect['target'], forTarget)) { const target = redirect['target'][forTarget].split('=>'); const originNum = parseInt(getReleaseNum(target[0], versions)); const targetNum = parseInt(getReleaseNum(target[1], versions)); if (analyzeUrl['page'] == redirect[target[0]]) { if ( analyzeUrl['direction'] != 'toBottom' && originNum < targetNum && parseInt(analyzeUrl['versionNum']) <= originNum ) { relatedUrl.push({ 'release': target[1], 'direction': 'toTop', 'url': redirect[target[1]], }); } if ( analyzeUrl['direction'] != 'toTop' && originNum > targetNum && parseInt(analyzeUrl['versionNum']) >= originNum ) { relatedUrl.push({ 'release': target[1], 'direction': 'toBottom', 'url': redirect[target[1]], }); } } } } } return relatedUrl; } function fillUrls(direction, historyArray, verCurrentNum, versions) { const historyArrayTemp = []; for (forVersions in versions) { if ({}.hasOwnProperty.call(versions, forVersions)) { forVersions = parseInt(forVersions); if (direction == 'toBottom') { if (forVersions < verCurrentNum) { if (historyArray[versions[forVersions]] == null) { if (forVersions != versions.length-1) { const next = findNextUrl(forVersions, versions, historyArray); if (next != -1) { historyArrayTemp[versions[forVersions]] = historyArray[versions[next]]; } } } else { historyArrayTemp[versions[forVersions]] = historyArray[versions[forVersions]]; } } } if (direction == 'toTop') { if (forVersions >= verCurrentNum) { if (historyArray[versions[forVersions]] == null) { if (forVersions != 0) { const prev = findPrevUrl(forVersions, versions, historyArrayTemp); if (prev != -1) { historyArrayTemp[versions[forVersions]] = historyArrayTemp[versions[prev]]; } } } else { historyArrayTemp[versions[forVersions]] = historyArray[versions[forVersions]]; } } } } } return historyArrayTemp; } function findNextUrl(num, versions, historyArray) { let found = -1; for (i in versions) { if ({}.hasOwnProperty.call(versions, i)) { i = parseInt(i); if (i > num) { if (historyArray[versions[i]] != null && found == -1) { found = i; } } } } return found; } function findPrevUrl(num, versions, historyArrayTemp) { let found = -1; for (i in versions) { if ({}.hasOwnProperty.call(versions, i)) { i = parseInt(i); if (i >= num) { if (historyArrayTemp[versions[i-1]] != null && found == -1) { found = i-1; } } } } return found; } }); function checkEncodeURI(str) { return /\%/i.test(str); } 